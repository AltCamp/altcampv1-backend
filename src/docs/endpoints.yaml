openapi: 3.0.0
info:
  title: AltCamp API Docs
  description: AltCamp is an e-learning platform that allows students to post messages to the discussion threads, interact and receive feedback from other students and instructors, and hence create a deeper understanding of the subject matter being discussed. This documentation covers the Mentors' routes
  version: 1.0.0
servers:
  - url: '{scheme}://{host}'
    variables:
      scheme:
        default: https
        enum:
          - http
          - https
      host:
        default: the-altcamp.onrender.com
        enum:
          - localhost:8000 # Local development server
          - the-altcamp.onrender.com # Development server

# --------------- AUTHENTICATION ---------------------------------------

# --------------- AUTHENTICATION ---------------------------------------

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: This route creates account details in the database
      requestBody:
        description: Account details passed in the body as a request
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/signUpAccountRequest'
            examples:
              Student signup:
                $ref: '#/components/consolidated/examples/studentSignupRequest'
              Student signup (as AltScholer):
                $ref: '#/components/consolidated/examples/altStudentSignupRequest'
              Mentor signup:
                $ref: '#/components/consolidated/examples/mentorSignupRequest'
      responses:
        '201':
          description: 'Account is created successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentCreated'
              examples:
                Student signup:
                  $ref: '#/components/consolidated/examples/studentSignUpResponse'
                Student signup (as AltScholer):
                  $ref: '#/components/consolidated/examples/altStudentSignUpResponse'
                Mentor signup:
                  $ref: '#/components/consolidated/examples/mentorSignUpResponse'
        '422':
          description: One or more user input not validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: There is a conflict error as account already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'

      deprecated: false
      security: []

  /auth/login:
    post:
      tags:
        - Auth
      summary: Logs in to user account
      requestBody:
        description: Accepts user's email and password into the body as a request
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/loginAccountRequest'
            examples:
              Student login:
                $ref: '#/components/consolidated/examples/studentLoginRequest'
              Mentor login:
                $ref: '#/components/consolidated/examples/mentorLoginRequest'
        required: true
      responses:
        '200':
          description: 'Returns a bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentCreated'
              examples:
                Student login:
                  $ref: '#/components/consolidated/examples/studentLoginResponse'
                Mentor login:
                  $ref: '#/components/consolidated/examples/mentorLoginResponse'
        '401':
          description: 'Token is  invalid. User not authorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

      deprecated: false
      security: []

  # ------------------------------------ MENTOR -------------------------------------
  /mentors/{mentorID}:
    get:
      tags:
        - Mentor
      summary: This returns a single mentor
      description: Accepts the ID of a user and search the database if the user exists
      operationId: getMentorById
      parameters:
        - name: mentorID
          in: path
          description: Mentor ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Returns a single mentor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUser'

        '404':
          description: Mentor Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /mentors:
    get:
      tags:
        - Mentor
      summary: Returns an array of Mentor.
      description: This simply returns all registed mentors found in the database
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllUsers'

  /mentors/update-profile:
    put:
      tags:
        - Mentor
      security:
        - bearer: []
      summary: update mentor details
      description: The accepts the mentor firstname, lastname or both and updates the profile in the database
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/updateMentorRequest'
      responses:
        '200':
          description: Returns mentor updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUser'

        '404':
          description: Mentor Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /mentors/change-password:
    put:
      tags:
        - Mentor
      security:
        - bearer: []
      summary: update mentor password
      description: This updates the mentors' password who must be logged in
      requestBody:
        description: Accepts Mentors' password in the body as a request
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/updateMentorPasswordRequest'
      responses:
        '200':
          description: Returns the updated Mentor profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUserPassword'

        '404':
          description: Mentor Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  # ------------------ STUDENT -----------------------------

  # ------------------ STUDENT -----------------------------

  /students/{studentID}:
    get:
      tags:
        - Student
      summary: This returns a single student
      description: Accepts the ID of a user and search the database if the user exists
      operationId: getSingleStudentById
      parameters:
        - name: studentID
          in: path
          description: Student ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Returns a single student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStudent'

        '404':
          description: Student Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /students:
    get:
      tags:
        - Student
      summary: Returns an array of Students
      description: This simply returns all registed students found in the database
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllStudents'

  /students/update-profile:
    put:
      tags:
        - Student
      security:
        - bearer: []
      summary: update student details
      description: The accepts the student firstname, lastname or both and updates the profile in the database
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/updateStudentRequest'
      responses:
        '200':
          description: Returns student updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUser'

        '404':
          description: Student Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /students/change-password:
    put:
      tags:
        - Student
      security:
        - bearer: []
      summary: update student password
      description: This updates the students' password who must be logged in
      requestBody:
        description: Accepts Students' password in the body as a request
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/updateStudentPasswordRequest'
      responses:
        '200':
          description: Returns the updated Student profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUser'

        '404':
          description: Student Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  # --------------------------------- QUESTION ----------------------

  /questions:
    post:
      tags:
        - Questions
      security:
        - bearer: []
      summary: Post a new question
      description: This posts a new question
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/askNewQuestion'
      responses:
        '201':
          description: Returns posted question details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/newQuestionDetails'
        '400':
          description: Question Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

    # Might be added later when error is accounted for in the api
    # '422':
    #   description: Unprocessable Entity
    #   content:
    #     application/json:
    #       schema:
    #         $ref: '#/components/schemas/ValidationError'

    get:
      tags:
        - Questions
      security:
        - bearer: []
      summary: Returns posted questions
      description: This returns all posted questions along side other related information
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPostedQuestions'

  /questions/{questionID}:
    get:
      tags:
        - Questions
      security:
        - bearer: []
      summary: This returns a single question
      description: Accepts the ID of a question and search the database if the question exists
      operationId: getSingleQuestionById
      parameters:
        - name: questionID
          in: path
          description: Question ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Returns a single question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getQuestion'

        '404':
          description: Question Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    patch:
      tags:
        - Questions
      security:
        - bearer: []
      summary: Update Question details
      description: The accepts question details and updates the profile in the database
      requestBody:
        description: Accepts the question details in the body as a request
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/updateQuestion'
      operationId: updateSingleQuestionById
      parameters:
        - name: questionID
          in: path
          description: Question ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Returns updated question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getQuestion'

        '404':
          description: Question Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

        '401':
          description: 'Token is  invalid. User not authorized'
          content:
            application/json::
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

    delete:
      tags:
        - Questions
      security:
        - bearer: []
      summary: Delete a Question
      description: This route deletes a posted question
      operationId: deleteSingleQuestionById
      parameters:
        - name: questionID
          in: path
          description: Question ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Returns deleted question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteQuestion'

        '404':
          description: Question Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

        '401':
          description: 'Token is  invalid. User not authorized'
          content:
            application/json::
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  /{questionID}/upvote:
    patch:
      tags:
        - Questions
      security:
        - bearer: []
      summary: This updates the upvote field in a question
      description: Accepts the ID of a question and updates the upvote field
      operationId: updateUpvoteInQuestionById
      parameters:
        - name: questionID
          in: path
          description: Question ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Returns a upvoted question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getQuestion'

        '400':
          description: Question Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /{questionID}/downvote:
    patch:
      tags:
        - Questions
      security:
        - bearer: []
      summary: This updates the downvote field in a question
      description: Accepts the ID of a question and updates the downvote field
      operationId: updatedownvoteInQuestionById
      parameters:
        - name: questionID
          in: path
          description: Question ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Returns a downvoted question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getQuestion'

        '400':
          description: Question Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  # --------------- ANSWERS ------------------------

  /answers:
    post:
      tags:
        - Answers
      security:
        - bearer: []
      summary: Post a new answer
      description: This posts a new answer
      requestBody:
        description: Answer a question by passing the question ID and the answer content in the body as a request
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/postNewAnswer'
      responses:
        '201':
          description: Returns posted answer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/newAnswerDetails'

    # Might be added later when error is accounted for in the api
    # '422':
    #   description: Unprocessable Entity
    #   content:
    #     application/json:
    #       schema:
    #         $ref: '#/components/schemas/ValidationError'

    get:
      tags:
        - Answers
      security:
        - bearer: []
      summary: Returns posted Answers
      description: This returns all posted Answers for a question
      parameters:
        - name: questionId
          in: query
          description: Question ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of Answers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPostedAnswer'

  /answers/{answerID}:
    get:
      tags:
        - Answers
      security:
        - bearer: []
      summary: This returns a single answer
      description: Accepts the ID of a answer and search the database if the answers exists and returns it
      operationId: getSingleAnswerById
      parameters:
        - name: answerID
          in: path
          description: Answer ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Returns a single answer on a question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/newAnswerDetails'
        '404':
          description: Answer Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    patch:
      tags:
        - Answers
      security:
        - bearer: []
      summary: This route updates and returns a single answer
      description: This accepts the ID of an answer, searches the database to determine if the answer exists, and updates it if found.
      requestBody:
        description: Accepts the answer content in the body as a request
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/updateAnswers'
      operationId: updatesSingleAnswerById
      parameters:
        - name: answerID
          in: path
          description: Answer ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Returns a single answer on a question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/newAnswerDetails'
        '404':
          description: Question Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '401':
          description: 'Token is  invalid. User not authorized'
          content:
            application/json::
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  /upvote/{answerID}:
    patch:
      tags:
        - Answers
      security:
        - bearer: []
      summary: This updates the upvote field in a answer
      description: Accepts the ID of a answer and updates the upvote field
      operationId: updateUpvoteInAnswerById
      parameters:
        - name: answerID
          in: path
          description: Answer ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Returns a upvoted answer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/newAnswerDetails'

        '400':
          description: answer Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /downvote/{answerID}:
    patch:
      tags:
        - Answers
      security:
        - bearer: []
      summary: This updates the downvote field in the answer document
      description: Accepts the ID of a answer and updates the downvote field
      operationId: updatedownvoteInAnswerById
      parameters:
        - name: answerID
          in: path
          description: Answer ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Returns a downvoted question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/newAnswerDetails'

        '400':
          description: Question Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

# ------------------------ COMPONENTS ----------------------------

components:
  schemas:
    signUpAccountRequest:
      title: Sign up request
      required:
        - firstname
        - lastname
        - email
        - track
        - category
        - password
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])'
          description: Password must contain uppercase, lowercase, number and special character
        track:
          type: string
        category:
          type: string
        altSchoolId:
          type: string
      example:
        firstname: Johan
        lastname: Dolapo
        email: johnny.dope@mail.com
        password: Pkgj748_h!@
        track: Product Design
        category: Student
        altSchoolId: ALT/SOD/023/0010

    signUpMentorRequest:
      title: sign up mentor request
      required:
        - firstname
        - lastname
        - email
        - track
        - specialization
        - yearsOfExperience
        - password
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])'
          description: password must contain uppercase, lowercase, number and special character
        track:
          type: string
        specialization:
          type: string
        yearsOfExperience:
          type: number
      example:
        firstname: test
        lastname: sample
        email: test@gmail.com
        password: Test12345%
        track: testing
        specialization: sampling
        yearsOfExperience: 1000

    getAllUsers:
      title: get all mentor request
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
          firstname:
            type: string
          lastname:
            type: string
          email:
            type: string
          track:
            type: string
          accountType:
            type: string
          owner:
            type: object
            properties:
              _id:
                type: string
              specialization:
                type: string
              yearsOfExperience:
                type: integer
          createdAt:
            type: string
            default: '2023-01-01T00:10:52.567Z'
          updatedAt:
            type: string
            default: '2023-01-01T00:10:52.567Z'

    getAllStudents:
      title: Get all students request
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
          firstname:
            type: string
          lastname:
            type: string
          email:
            type: string
          track:
            type: string
          accountType:
            type: string
          owner:
            type: object
            properties:
              _id:
                type: string
              matric:
                type: string
              stack:
                type: string
              gender:
                type: string
          createdAt:
            type: string
            default: '2023-01-01T00:10:52.567Z'
          updatedAt:
            type: string
            default: '2023-01-01T00:10:52.567Z'

    getStudent:
      title: Get all students request
      type: object
      properties:
        _id:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        track:
          type: string
        accountType:
          type: string
        owner:
          type: object
          properties:
            _id:
              type: string
            matric:
              type: string
            stack:
              type: string
            gender:
              type: string
        createdAt:
          type: string
          default: '2023-01-01T00:10:52.567Z'
        updatedAt:
          type: string
          default: '2023-01-01T00:10:52.567Z'

    getUser:
      title: get single user request
      type: object
      properties:
        statusCode:
          type: integer
          default: 200
        message:
          type: string
        data:
          type: object
          properties:
            _id:
              type: string
            firstname:
              type: string
            lastname:
              type: string
            email:
              type: string
            track:
              type: string
            accountType:
              type: string
              default: Mentor
            owner:
              type: object
              properties:
                _id:
                  type: string
                __v:
                  type: number
                  defaul: 0
            createdAt:
              type: string
              default: '2023-01-01T00:10:52.567Z'
            updatedAt:
              type: string
              default: '2023-01-01T00:10:52.567Z'

    updateUserPassword:
      title: get single user request
      type: object
      properties:
        statusCode:
          type: integer
          default: 200
        message:
          type: string
        data:
          type: object
          properties:
            _id:
              type: string
            firstname:
              type: string
            lastname:
              type: string
            email:
              type: string
            track:
              type: string
            accountType:
              type: string
            owner:
              type: string
            createdAt:
              type: string
              default: '2023-01-01T00:10:52.567Z'
            updatedAt:
              type: string
              default: '2023-01-01T00:10:52.567Z'

    loginAccountRequest:
      title: Login account request
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])'
          description: password must contain uppercase, lowercase, number and special character
      example:
        email: johnny.dope@mail.com
        password: Pkgj748_h!@

    loginMentorRequest:
      title: login mentor request
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])'
          description: password must contain uppercase, lowercase, number and special character
      example:
        email: johnny.dope@mail.com
        password: Pkgj748_h!@

    updateMentorRequest:
      title: update mentor details
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
      example:
        firstname: newTest
        lastname: newSampling

    updateMentorPasswordRequest:
      title: update mentor api
      type: object
      properties:
        password:
          type: string
      example:
        password: newTestPassword1@

    signUpStudentRequest:
      title: sign up student request
      required:
        - firstname
        - lastname
        - email
        - track
        - password
        - matric
        - stack
        - gender
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])'
          description: password must contain uppercase, lowercase, number and special character
        track:
          type: string
        stack:
          type: string
        matric:
          type: string
        gender:
          type: string
          enum:
            - male
            - female
      example:
        firstname: test
        lastname: sample
        email: test@gmail.com
        password: Test12345%
        track: testing
        stack: backend
        matric: randomMatric123
        gender: male

    loginStudentRequest:
      title: login student request
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])'
          description: password must contain uppercase, lowercase, number and special character
      example:
        email: test@gmail.com
        password: Test12345%

    updateStudentRequest:
      title: update user details
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
      example:
        firstname: newTest
        lastname: newSampling

    updateStudentPasswordRequest:
      title: update student api
      type: object
      properties:
        password:
          type: string
      example:
        password: newTestPassword1@

    ValidationError:
      type: object
      properties:
        messsage:
          type: string
        statusCode:
          type: number
          default: 422
        error:
          type: string
      example:
        statusCode: 422
        message: One or more of user input not validated
        error: Unprocessable Entity

    BadRequestError:
      type: object
      properties:
        messsage:
          type: string
        statusCode:
          type: number
          default: 400
        error:
          type: string

    ConflictError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          default: 409
        error:
          type: string
      example:
        statusCode: 409
        message: User already exists!
        error: Conflict

    MentorCreated:
      type: object
      properties:
        statusCode:
          type: integer
          default: 201
        message:
          type: string
        data:
          type: object
          properties:
            token:
              type: string
            user:
              type: object
              properties:
                account:
                  type: object
                  properties:
                    firstname:
                      type: string
                    lastname:
                      type: string
                    email:
                      type: string
                    track:
                      type: string
                    accountType:
                      type: string
                    owner:
                      type: object
                      properties:
                        _id:
                          type: string
                        __v:
                          type: number
                          defaul: 0
                    _id:
                      type: string
                    createdAt:
                      type: string
                      default: '2023-01-01T00:10:52.567Z'
                    updatedAt:
                      type: string
                      default: '2023-01-01T00:10:52.567Z'

    StudentCreated:
      type: object
      properties:
        statusCode:
          type: integer
          default: 201
        message:
          type: string
        data:
          type: object
          properties:
            token:
              type: string
            user:
              type: object
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                email:
                  type: string
                track:
                  type: string
                accountType:
                  type: string
                  default: Student
                owner:
                  type: object
                  properties:
                    _id:
                      type: string
                    altSchoolId:
                      type: string
                    __v:
                      type: number
                      defaul: 0
                _id:
                  type: string
                gender:
                  type: string
                createdAt:
                  type: string
                  default: '2023-01-01T00:10:52.567Z'
                updatedAt:
                  type: string
                  default: '2023-01-01T00:10:52.567Z'

    UserToken:
      type: object
      properties:
        statusCode:
          type: integer
          default: 200
        message:
          type: string
        data:
          type: object
          properties:
            token:
              type: string
        user:
          type: object
          properties:
            _id:
              type: string
            firstname:
              type: string
            lastname:
              type: string
            email:
              type: string
            track:
              type: string
            accountType:
              type: string
            owner:
              type: object
              properties:
                _id:
                  type: string
                specialization:
                  type: string
                yearsOfExperience:
                  type: integer
            createdAt:
              type: string
              default: '2023-01-01T00:10:52.567Z'
            updatedAt:
              type: string
              default: '2023-01-01T00:10:52.567Z'

    UnauthorizedError:
      type: object
      properties:
        statusCode:
          type: integer
          default: 401
        message:
          type: string
        error:
          type: string

    NotFoundError:
      type: object
      properties:
        statusCode:
          type: integer
          default: 404
        message:
          type: string
        error:
          type: string

    askNewQuestion:
      type: object
      properties:
        title:
          type: string
        body:
          type: string

    newQuestionDetails:
      type: object
      properties:
        statusCode:
          type: integer
          default: 201
        message:
          type: string
        data:
          type: object
          properties:
            title:
              type: string
            body:
              type: string
            slug:
              type: string
            upvotes:
              type: integer
            upvotedBy:
              type: array
            downvotes:
              type: integer
            downvotedBy:
              type: array
            answer:
              type: array
            _id:
              type: string
            author:
              type: string
            createdAt:
              type: number
            updatedAt:
              type: number

    getPostedQuestions:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              title:
                type: string
              body:
                type: string
              slug:
                type: string
              upvotes:
                type: integer
              upvotedBy:
                type: array
              downvotes:
                type: integer
              downvotedBy:
                type: array
              answer:
                type: array
              author:
                type: object
                properties:
                  _id:
                    type: string
                  firstname:
                    type: string
                  lastname:
                    type: string
              createdAt:
                type: number
              updatedAt:
                type: number

    updateQuestion:
      type: object
      properties:
        title:
          type: string
        body:
          type: string

    deleteQuestion:
      type: object
      properties:
        statusCode:
          type: integer
          default: 201
        message:
          type: string
        data:
          type: object
          properties:
            title:
              type: string
            body:
              type: string
            slug:
              type: string
            upvotes:
              type: integer
            upvotedBy:
              type: array
            downvotes:
              type: integer
            downvotedBy:
              type: array
            answer:
              type: array
            _id:
              type: string
            author:
              type: string

            createdAt:
              type: number
            updatedAt:
              type: number

    getQuestion:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        data:
          type: object
          properties:
            _id:
              type: string
            title:
              type: string
            body:
              type: string
            slug:
              type: string
            upvotes:
              type: integer
            upvotedBy:
              type: array
            downvotes:
              type: integer
            downvotedBy:
              type: array
            answer:
              type: array
            author:
              type: object
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                _id:
                  type: string
            createdAt:
              type: number
            updatedAt:
              type: number

    updateAnswers:
      type: object
      properties:
        content:
          type: string

    postNewAnswer:
      type: object
      properties:
        content:
          type: string
        questionId:
          type: string

    newAnswerDetails:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        data:
          type: object
          properties:
            content:
              type: string
            upvotes:
              type: integer
            upvotedBy:
              type: array
            downvotes:
              type: integer
            downvotedBy:
              type: array
            question:
              type: string
            author:
              type: object
              properties:
                _id:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                email:
                  type: string
                track:
                  type: string
                accountType:
                  type: string
                owner:
                  type: string
                createdAt:
                  type: number
                updatedAt:
                  type: number
            _id:
              type: string
            createdAt:
              type: number
            updatedAt:
              type: number

    getPostedAnswers:
      type: object
      properties:
        statusCode:
          type: string
        message:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              content:
                type: string
              upvotes:
                type: integer
              upvotedBy:
                type: array
              downvotes:
                type: integer
              downvotedBy:
                type: array
              question:
                type: string
              author:
                type: object
                properties:
                  _id:
                    type: string
                  firstname:
                    type: string
                  lastname:
                    type: string
                  email:
                    type: string
                  track:
                    type: string
                  accountType:
                    type: string
                  owner:
                    type: string
                  createdAt:
                    type: number
                  updatedAt:
                    type: number
              createdAt:
                type: number
              updatedAt:
                type: number

  # ----------------------------------------------------
  consolidated:
    examples:
      mentorLoginRequest:
        value:
          email: lilylearn@mail.com
          password: 8&jsfjhJD(@

      studentLoginRequest:
        value:
          email: johnny.dope@mail.com
          password: Pkgj748_h!@

      mentorLoginResponse:
        value:
          statusCode: 200
          message: Request Successful!
          data:
            token: Bearer token
            user:
              firstName: Lily
              lastName: Olaniyan
              email: lilylearn@mail.com
              track: Frontend Engineering
              accountType: Mentor
              owner:
                _id: some ID
                __v: 0
              _id: some ID
              createdAt: '2023-01-01T00:10:52.567Z'
              updatedAt: '2023-01-01T00:10:52.567Z'

      studentLoginResponse:
        value:
          statusCode: 200
          message: Request Successful!
          data:
            token: Bearer token
            user:
              firstName: Johan
              lastName: Dolapo
              email: johnny.dope@mail.com
              track: Frontend Engineering
              accountType: Student
              owner:
                _id: some ID
                __v: 0
              _id: some ID
              createdAt: '2023-01-01T00:10:52.567Z'
              updatedAt: '2023-01-01T00:10:52.567Z'

      altStudentLoginResponse:
        value:
          statusCode: 200
          message: Request Successful!
          data:
            token: Bearer token
            user:
              firstName: Johan
              lastName: Dolapo
              email: johnny.dope@mail.com
              track: Frontend Engineering
              accountType: Student
              owner:
                _id: some ID
                altSchoolId: 'ALT/SOD/023/0010'
                __v: 0
              _id: some ID
              createdAt: '2023-01-01T00:10:52.567Z'
              updatedAt: '2023-01-01T00:10:52.567Z'

      mentorSignUpResponse:
        value:
          statusCode: 201
          message: Request Successful!
          data:
            token: Bearer token
            user:
              firstName: Lily
              lastName: Olaniyan
              email: lilylearn@mail.com
              track: Frontend Engineering
              accountType: Mentor
              owner:
                _id: some ID
                __v: 0
              _id: some ID
              createdAt: '2023-01-01T00:10:52.567Z'
              updatedAt: '2023-01-01T00:10:52.567Z'

      studentSignUpResponse:
        value:
          statusCode: 201
          message: Request Successful!
          data:
            token: Bearer token
            user:
              firstName: Johan
              lastName: Dolapo
              email: johnny.dope@mail.com
              track: Frontend Engineering
              accountType: Student
              owner:
                _id: some ID
                __v: 0
              _id: some ID
              createdAt: '2023-01-01T00:10:52.567Z'
              updatedAt: '2023-01-01T00:10:52.567Z'

      altStudentSignUpResponse:
        value:
          statusCode: 201
          message: Request Successful!
          data:
            token: Bearer token
            user:
              firstName: Johan
              lastName: Dolapo
              email: johnny.dope@mail.com
              track: Frontend Engineering
              accountType: Student
              owner:
                _id: some ID
                altSchoolId: 'ALT/SOD/023/0010'
                __v: 0
              _id: some ID
              createdAt: '2023-01-01T00:10:52.567Z'
              updatedAt: '2023-01-01T00:10:52.567Z'

      mentorSignupRequest:
        value:
          firstName: Lily
          lastName: Olaniyan
          email: lilylearn@mail.com
          password: 8&jsfjhJD(@
          track: Frontend Engineering
          category: Mentor

      altStudentSignupRequest:
        value:
          firstName: Johan
          lastName: Dolapo
          email: johnny.dope@mail.com
          password: Pkgj748_h!@
          track: Frontend Engineering
          category: Student
          altSchoolId: 'ALT/SOD/023/0010'

      studentSignupRequest:
        value:
          firstName: Johan
          lastName: Dolapo
          email: johnny.dope@mail.com
          password: Pkgj748_h!@
          track: Frontend Engineering
          category: Student

  # ----------------------------------------------------

  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []

tags:
  - name: Auth
    description: ''
  - name: Mentor
    description: ''
  - name: Student
    description: ''
